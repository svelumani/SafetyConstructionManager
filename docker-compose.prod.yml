version: '3.8'

services:
  # PostgreSQL Database for Production
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-mysafety}
      POSTGRES_USER: ${DB_USER:-mysafety_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - mysafety-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mysafety_user} -d ${DB_NAME:-mysafety}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MySafety Application
  app:
    build: .
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://${DB_USER:-mysafety_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-mysafety}
      SESSION_SECRET: ${SESSION_SECRET}
      # Email configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
    volumes:
      - app_uploads:/app/uploads
    networks:
      - mysafety-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3



volumes:
  postgres_data:
  app_uploads:

networks:
  mysafety-network:
    driver: bridge