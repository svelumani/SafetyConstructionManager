version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: mysafety
      POSTGRES_USER: mysafety_user
      POSTGRES_PASSWORD: mysafety_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - mysafety-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mysafety_user -d mysafety"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySafety Application
  app:
    build: .
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://mysafety_user:mysafety_password@db:5432/mysafety
      SESSION_SECRET: your-super-secret-session-key-change-this-in-production
      # Email configuration (optional)
      # SMTP_HOST: your-smtp-host
      # SMTP_PORT: 587
      # SMTP_USER: your-email@domain.com
      # SMTP_PASS: your-email-password
      # SMTP_FROM: MySafety <noreply@yourdomain.com>
    ports:
      - "5000:5000"
    volumes:
      - ./uploads:/app/uploads
    networks:
      - mysafety-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3



volumes:
  postgres_data:

networks:
  mysafety-network:
    driver: bridge